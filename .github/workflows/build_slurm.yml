name: Build Slurm
run-name: ${{ github.actor }} is attempting to build pmi-x and slurm ðŸš€
on: workflow_dispatch
permissions: write-all
env:
  # version of openpmix and slurm to download and build together
  PMIX_VERSION: 5.0.7
  SLURM_VERSION: 24.11.3
  
  # files used as cache for variables sharing
  GLOBAL_VARS_FILE: global_vars.txt

  # images used as a build env
  PMIXIMAGE_URL: ghcr.io/jose-d/rocky9_pmix-build-image:latest
  SLURMIMAGE_URL: ghcr.io/jose-d/rocky9_slurm-build-image:latest

jobs:
  prolog:
    name: Generate release tag from current datestring
    runs-on: ubuntu-latest
    steps:
      - name: Create releasetag
        id: create_releasetag
        run: |
          RELTAG="$(date +%Y%m%d%H%M%S)"
          echo "::set-output name=reltag::${RELTAG}"

    outputs:
      reltag: ${{ steps.create_releasetag.outputs.reltag }}
      
  build_pmix:
    name: Build pmix
    runs-on: ubuntu-latest
    needs: prolog
    env:
      GHCR_U: ${{ github.actor }}
      GHCR_S: ${{ secrets.GITHUB_TOKEN }}
      RELTAG: ${{ needs.prolog.outputs.reltag }}
      
    steps:
      - name: checkout pmix build script
        uses: actions/checkout@v4
        with:
          sparse-checkout: build_pmix.sh
          sparse-checkout-cone-mode: false
          path: scripts

      - name: Download pmix tarball, unpack, patch spec file
        shell: bash
        run: |
            wget "https://github.com/openpmix/openpmix/releases/download/v${PMIX_VERSION}/pmix-${PMIX_VERSION}.tar.bz2"
            tar -xf ./pmix*
            sed -i "s/^Release.*$/Release: ${RELTAG}%{?dist}/g" pmix-*/contrib/pmix.spec
          
      - name: Login to ghcr registry with docker and do build
        run: |
          echo $GHCR_S | docker login ghcr.io -u ${GHCR_U} --password-stdin
          docker run --cidfile /tmp/docker_test.cid \
                     --env PMIX_RELTAG=${RELTAG} \
                     --env GITHUB_WORKSPACE=${GITHUB_WORKSPACE} \
                     -v ${GITHUB_WORKSPACE}:${GITHUB_WORKSPACE} \
                     -v ${HOME}:${HOME} \
                     -w ${GITHUB_WORKSPACE} \
                     ${PMIXIMAGE_URL} \
                     /bin/bash scripts/build_pmix.sh | tee pmix_build.log

      - name: Upload build log as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pmix_build.log
          if-no-files-found: error
          path: ${{ github.workspace }}/pmix_build.log

      - name: Upload image_pmix_rpms.txt as artifact 
        uses: actions/upload-artifact@v4
        with:
          name: image_pmix_rpms.txt
          if-no-files-found: error
          path: ${{ github.workspace }}/image_pmix_rpms.txt

      - name: Upload pmix rpms as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pmix_rpms
          if-no-files-found: error
          path: ${{ github.workspace }}/rpms/*.rpm

  build_slurm:
    name: Build slurm
    runs-on: ubuntu-latest
    needs:
      - build_pmix
    env:
      GHCR_U: ${{ github.actor }}
      GHCR_S: ${{ secrets.GITHUB_TOKEN }}
      RELTAG: ${{ needs.prolog.outputs.reltag }}

    steps:
      - name: Download pmix rpms
        uses: actions/download-artifact@v4
        with:
          name: pmix_rpms
          path: pmix_rpms

      - name: Checkout slurm build script
        uses: actions/checkout@v4
        with:
          sparse-checkout: build_slurm.sh
          sparse-checkout-cone-mode: false
          path: scripts

      - name: Download slurm tarball, unpack, patch spec file
        shell: bash
        run: |
           wget --quiet https://download.schedmd.com/slurm/slurm-${SLURM_VERSION}.tar.bz2
           tar -xf ./slurm*
           sed -i "s/^%define rel.*$/%define rel     ${RELTAG}/g" slurm*/slurm.spec
           sed -i "s/^%global slurm_source_dir.*$/%global slurm_source_dir %{name}-%{version}/g" ./slurm*/slurm.spec

      - name: Upload spec file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: slurm.spec
          if-no-files-found: error
          path: ${{ github.workspace }}/slurm*/slurm.spec

      - name: Login to ghcr registry with docker and do build
        shell: bash
        run: |
            set -x
            echo $GHCR_S | docker login ghcr.io -u ${GHCR_U} --password-stdin
            docker run --cidfile /tmp/docker_test.cid \
                     --env SLURM_RELTAG=${RELTAG} \
                     --env GITHUB_WORKSPACE=${GITHUB_WORKSPACE} \
                     -v ${GITHUB_WORKSPACE}:${GITHUB_WORKSPACE} \
                     -v ${HOME}:${HOME} \
                     -w ${GITHUB_WORKSPACE} \
                     ${SLURMIMAGE_URL} \
                     /bin/bash scripts/build_slurm.sh | tee slurm_build.log

      - name: Upload build log as artifact
        uses: actions/upload-artifact@v4
        with:
          name: slurm_build.log
          if-no-files-found: error
          path: ${{ github.workspace }}/slurm_build.log

      - name: Upload image_slurm_rpms.txt as artifact 
        uses: actions/upload-artifact@v4
        with:
          name: image_slurm_rpms.txt
          if-no-files-found: error
          path: ${{ github.workspace }}/image_slurm_rpms.txt
            
      - name: Upload slurm rpms as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: slurm_rpms
          if-no-files-found: error
          path: ${{ github.workspace }}/rpms/*.rpm
